using DryIoc;
using Opc.NodeSet2.Server.Example.NodeServices;
using Opc.NodeSet2.Server.Ioc;
using Opc.NodeSet2.Server.Services;

namespace Opc.NodeSet2.Server.Example;

/// <summary>
/// Represents an application that extends the functionality of the <see cref="OpcNodeSet2Application"/> class by
/// registering custom encodable types, NodeSet2 files, and services.
/// </summary>
public class Application : OpcNodeSet2Application
{
	protected override void RegisterTypes(IContainer container)
	{
		base.RegisterTypes(container);

		//TODO Register your custom types here
	}

	protected override void RegisterEncodableTypes(IEncodeableTypes encodeableTypes)
	{
		base.RegisterEncodableTypes(encodeableTypes);

		//TODO Register your encodeable types here (generated by the model compiler)
		encodeableTypes.Add(typeof(NodeSet2Server.DataTypes).Assembly);
	}

	protected override void RegisterNodeSet2Files(INodeSetFiles nodeSetFiles)
	{
		base.RegisterNodeSet2Files(nodeSetFiles);

		//TODO Register your NodeSet2.xml files here
		nodeSetFiles.Add(@"NodeSets\Example.NodeSet2.xml");
	}

	protected override void RegisterServices(INodeServiceContainer serviceContainer)
	{
		base.RegisterServices(serviceContainer);

		//TODO Register services to manipulate or add method handlers to the nodes of the server here
		serviceContainer.Register<EnableReadWriteOnAllBaseVariableStatesNodeService>();
		serviceContainer.Register<MethodHandleService>();
		serviceContainer.Register<GeneralMethodCalledService>();
	}
}